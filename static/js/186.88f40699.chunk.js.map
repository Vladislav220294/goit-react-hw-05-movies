{"version":3,"file":"static/js/186.88f40699.chunk.js","mappings":"qLA8BA,UA1BgB,SAAC,GAAiB,IAAfA,EAAc,EAAdA,QACjB,GAA8BC,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAOA,OANAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAA0BL,GACvBM,KAAKH,GACLI,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAC7B,CAACR,KAGF,8BACGE,GAAsC,IAA3BA,EAAQS,QAAQC,OAC1BV,EAAQS,QAAQE,KAAI,SAAAC,GAAM,OACxB,2BACE,qCAAaA,EAAOC,WACpB,uBAAID,EAAOE,YAFJF,EAAOG,QAMlB","sources":["components/Reviews/Reviews.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\r\nimport { useState, useEffect } from 'react';\r\nimport * as Fetch from '../../Fetch';\r\n\r\nconst Reviews = ({ movieId }) => {\r\n  const [reviews, setReviews] = useState(null);\r\n  useEffect(() => {\r\n    Fetch.fetchMovieByReviews(movieId)\r\n      .then(setReviews)\r\n      .catch(error => console.log(error));\r\n  }, [movieId]);\r\n\r\n  return (\r\n    <>\r\n      {reviews && reviews.results.length !== 0 ? (\r\n        reviews.results.map(review => (\r\n          <li key={review.id}>\r\n            <h3>Author: {review.author}</h3>\r\n            <p>{review.content}</p>\r\n          </li>\r\n        ))\r\n      ) : (\r\n        <h3>We dont have any reviews for this movie</h3>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nReviews.propTypes = {\r\n  movieId: PropTypes.string.isRequired,\r\n};\r\nexport default Reviews;\r\n"],"names":["movieId","useState","reviews","setReviews","useEffect","Fetch","then","catch","error","console","log","results","length","map","review","author","content","id"],"sourceRoot":""}