{"version":3,"file":"static/js/450.5ffa524e.chunk.js","mappings":"sSAAMA,EAAW,+BACXC,EAAM,mCAAZ,SACeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,yGAAsBC,EAAtB,+BAA4B,GAA5B,SACyBC,MAAMD,GAD/B,YACQE,EADR,QAGkBC,GAHlB,iCAIYD,EAASE,OAJrB,gDAKMC,QAAQC,OAAO,IAAIC,MAAM,cAL/B,2GAQO,SAASC,IACd,OAAOT,EAAO,GAAD,OAAIF,EAAJ,uCAA2CC,IAEnD,SAASW,EAAiBC,GAC/B,OAAOX,EAAO,GAAD,OAAIF,EAAJ,iCAAqCC,EAArC,kBAAkDY,IAE1D,SAASC,EAAoBC,GAClC,OAAOb,EAAO,GAAD,OAAIF,EAAJ,kBAAsBe,EAAtB,oBAA0Cd,IAElD,SAASe,EAAkBD,GAChC,OAAOb,EAAO,GAAD,OAAIF,EAAJ,kBAAsBe,EAAtB,4BAAkDd,IAE1D,SAASgB,EAAoBF,GAClC,OAAOb,EAAO,GAAD,OAAIF,EAAJ,kBAAsBe,EAAtB,4BAAkDd,M,qFCb3DiB,GAAUC,EAAAA,EAAAA,OAAK,kBAAM,gCACrBC,GAAUD,EAAAA,EAAAA,OAAK,kBAAM,gCA0E3B,UAxEyB,WACvB,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQtB,GAAQuB,EAAAA,EAAAA,MAARvB,IAQR,OANAwB,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAA0BP,GACvBQ,KAAKJ,GACLK,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAC7B,CAACV,KAGF,8BACGG,IACC,iCACE,SAAC,KAAD,CACEU,GAAI,IACJC,MAAO,CACLC,OAAQ,OACRC,QAAS,QACTC,MAAO,OACPC,eAAgB,OAChBC,gBAAiB,QACjBC,MAAO,QACPC,aAAc,OATlB,sBAcA,iBAAmBP,MAAO,CAAEE,QAAS,QAArC,WACE,gBAAKF,MAAO,CAAEC,OAAQ,QAAtB,UACE,gBACEO,IAAG,yCAAoCnB,EAAMoB,aAC7CC,IAAI,QAGR,4BACE,wBAAKrB,EAAMsB,SACX,yCAAuC,IAArBtB,EAAMuB,aAAxB,QACA,sCACA,uBAAIvB,EAAMwB,YACV,oCACA,uBAAIxB,EAAMyB,OAAO,GAAGC,YAbd7B,IAgBV,mBACA,oDACA,2BACE,yBACE,SAAC,KAAD,CAASa,GAAE,UAAK/B,EAAL,YAAX,qBAEF,yBACE,SAAC,KAAD,CAAS+B,GAAE,UAAK/B,EAAL,YAAX,2BAGJ,kBACCqB,IACC,SAAC,KAAD,CAAO2B,KAAI,UAAKhD,EAAL,YAAX,UACE,SAACe,EAAD,CAASG,QAASA,MAGrBG,IACC,SAAC,KAAD,CAAO2B,KAAI,UAAKhD,EAAL,YAAX,UACE,SAACiB,EAAD,CAASC,QAASA","sources":["Fetch.js","components/MovieDetailsPage/MovieDetailsPage.jsx"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\r\nconst KEY = '6603b3505d8dff735b697cdd8dfb31e0';\r\nasync function Fetch1(url = '') {\r\n  const response = await fetch(url);\r\n\r\n  return response.ok\r\n    ? await response.json()\r\n    : Promise.reject(new Error('Not found'));\r\n}\r\n\r\nexport function fetchTrendingMovies() {\r\n  return Fetch1(`${BASE_URL}/trending/movie/day?api_key=${KEY}`);\r\n}\r\nexport function fetchMovieByName(query) {\r\n  return Fetch1(`${BASE_URL}/search/movie?api_key=${KEY}&query=${query}`);\r\n}\r\nexport function fetchMovieByDetails(movie_id) {\r\n  return Fetch1(`${BASE_URL}/movie/${movie_id}?api_key=${KEY}`);\r\n}\r\nexport function fetchMovieByCasts(movie_id) {\r\n  return Fetch1(`${BASE_URL}/movie/${movie_id}/credits?api_key=${KEY}`);\r\n}\r\nexport function fetchMovieByReviews(movie_id) {\r\n  return Fetch1(`${BASE_URL}/movie/${movie_id}/reviews?api_key=${KEY}`);\r\n}\r\n","import { useEffect, useState, lazy } from 'react';\r\nimport {\r\n  useParams,\r\n  useRouteMatch,\r\n  Route,\r\n  NavLink,\r\n  Link,\r\n} from 'react-router-dom';\r\nimport * as Fetch from '../../Fetch';\r\n\r\nconst Credits = lazy(() => import('../Credits/Credits'));\r\nconst Reviews = lazy(() => import('../Reviews/Reviews'));\r\n\r\nconst MovieDetailsPage = () => {\r\n  const { movieId } = useParams();\r\n  const [movie, setMovie] = useState(null);\r\n  const { url } = useRouteMatch();\r\n\r\n  useEffect(() => {\r\n    Fetch.fetchMovieByDetails(movieId)\r\n      .then(setMovie)\r\n      .catch(error => console.log(error));\r\n  }, [movieId]);\r\n\r\n  return (\r\n    <>\r\n      {movie && (\r\n        <>\r\n          <Link\r\n            to={'/'}\r\n            style={{\r\n              margin: '10px',\r\n              display: 'block',\r\n              width: '80px',\r\n              textDecoration: 'none',\r\n              backgroundColor: 'brown',\r\n              color: 'black',\r\n              borderRadius: '5px',\r\n            }}\r\n          >\r\n            Go back\r\n          </Link>\r\n          <div key={movieId} style={{ display: 'flex' }}>\r\n            <div style={{ margin: '10px' }}>\r\n              <img\r\n                src={`https://image.tmdb.org/t/p/w300${movie.poster_path}`}\r\n                alt=\"\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <h2>{movie.title}</h2>\r\n              <p>User scores: {+movie.vote_average * 10}%</p>\r\n              <h3>Overview</h3>\r\n              <p>{movie.overview}</p>\r\n              <h3>Genres</h3>\r\n              <p>{movie.genres[0].name}</p>\r\n            </div>\r\n          </div>\r\n          <hr />\r\n          <h3>Additional information</h3>\r\n          <ul>\r\n            <li>\r\n              <NavLink to={`${url}/credits`}>Cast</NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to={`${url}/reviews`}>Reviews</NavLink>\r\n            </li>\r\n          </ul>\r\n          <hr />\r\n          {movie && (\r\n            <Route path={`${url}/credits`}>\r\n              <Credits movieId={movieId} />\r\n            </Route>\r\n          )}\r\n          {movie && (\r\n            <Route path={`${url}/reviews`}>\r\n              <Reviews movieId={movieId} />\r\n            </Route>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MovieDetailsPage;\r\n"],"names":["BASE_URL","KEY","Fetch1","url","fetch","response","ok","json","Promise","reject","Error","fetchTrendingMovies","fetchMovieByName","query","fetchMovieByDetails","movie_id","fetchMovieByCasts","fetchMovieByReviews","Credits","lazy","Reviews","movieId","useParams","useState","movie","setMovie","useRouteMatch","useEffect","Fetch","then","catch","error","console","log","to","style","margin","display","width","textDecoration","backgroundColor","color","borderRadius","src","poster_path","alt","title","vote_average","overview","genres","name","path"],"sourceRoot":""}